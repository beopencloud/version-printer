{"version":3,"file":"angular-extended-http-client.js","sources":["angular-extended-http-client/lib/angular-extended-http-client.service.ts","angular-extended-http-client/lib/angular-extended-http-client.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nimport { retry } from 'rxjs/operators';\r\n\r\nexport interface IObservableBase {\r\n    \r\n}\r\n\r\nexport interface IObservableErrorBase {\r\n    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the model from the body of the API response\r\n*/\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response.\r\n*/\r\nexport interface IObservableHttpResponse extends IObservableBase {\r\n  (subscribe: ISubscribeBase) : void;    \r\n}\r\n\r\n/*\r\nSuccess callback - returns the http response and the model from the body of the API response\r\n*/\r\nexport interface IObservableHttpCustomResponse<T> extends IObservableBase {\r\n  (subscribe: ISubscribe<T>) : void;    \r\n}\r\n\r\n/* \r\nFailure callback - returns the API thrown custom exception\r\n*/\r\nexport interface IObservableError<TError> extends IObservableErrorBase {\r\n    (error: TError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response through interface ISubscribeError\r\n*/\r\nexport interface IObservableHttpError extends IObservableErrorBase {\r\n  (error: ISubscribeError) : void;\r\n}\r\n\r\n/* \r\nFailure callback - returns the http error response and the API throw custom exception through interface ISubscribeCustomError<TError>\r\n*/\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n  (error: ISubscribeCustomError<TError>) : void;\r\n}\r\n\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;    \r\n}\r\n\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\n\r\nexport class SubscribeBase implements ISubscribeBase {\r\n  ok: boolean;\r\n  headers: HttpHeaders;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n  error: TError;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\nexport class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n  ok: boolean;\r\n  error: TError;\r\n  headers: HttpHeaders;\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\nexport enum ResponseType {\r\n  IObservable,\r\n  IObservableHttpResponse,\r\n  IObservableHttpCustomResponse\r\n}\r\n\r\nexport enum ErrorType {\r\n  IObservableError,\r\n  IObservableHttpError,\r\n  IObservableHttpCustomError\r\n}\r\n\r\nexport interface IHttpClientExtended {\r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any, \r\n                  pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>>;\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest, \r\n                              responseType?: ResponseType,\r\n                              success?: IObservableBase, \r\n                              failureType?: ErrorType,\r\n                              failure?: IObservableErrorBase, options?: any, \r\n                              pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>>;\r\n\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>>;\r\n\r\n  patch<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>>;            \r\n\r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any, \r\n                      pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpClientExt implements IHttpClientExtended {\r\n\r\n  constructor(private client: HttpClient)\r\n  {\r\n  }\r\n  \r\n  get<TResponse>(url: string, \r\n                  responseType?: ResponseType,\r\n                  success?: IObservableBase, \r\n                  failureType?: ErrorType, \r\n                  failure?: IObservableErrorBase, options?: any, \r\n                  pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.get<TResponse>(url, options != null ? { headers: options.headers, observe: 'response' } : {observe: 'response'});\r\n\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;\r\n  }\r\n\r\n\r\n  post<TRequest, TResponse>(url: string, model: TRequest,\r\n                              responseType?: ResponseType, \r\n                              success?: IObservableBase,\r\n                              failureType?: ErrorType, \r\n                              failure?: IObservableErrorBase, options?: any, \r\n                              pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.post<TResponse>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  put<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.put<T>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }\r\n\r\n  patch<T>(url: string, model: T,\r\n            responseType?: ResponseType, \r\n            success?: IObservableBase,\r\n            failureType?: ErrorType, \r\n            failure?: IObservableErrorBase, options?: any, \r\n            pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>) : Observable<HttpResponse<T>> {                \r\n    let httpResponse = this.client.patch<T>(url, model, options != null ? \r\n                                                                { headers: options.headers, observe: 'response' } \r\n                                                                : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }\r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }  \r\n\r\n  delete<TResponse>(url: string,\r\n                      responseType?: ResponseType, \r\n                      success?: IObservableBase,\r\n                      failureType?: ErrorType, \r\n                      failure?: IObservableErrorBase, options?: any, \r\n                      pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>) : Observable<HttpResponse<TResponse>> {                \r\n    let httpResponse = this.client.delete<TResponse>(url, options != null ? \r\n                                                  { headers: options.headers, observe: 'response' } \r\n                                                  : {observe: 'response'});\r\n    if (responseType != null && success != null) {\r\n        if (pipe != null) {\r\n          httpResponse = httpResponse.pipe(pipe);\r\n        }        \r\n        if (options != null && options.retry != null && options.retry > 0) {\r\n          httpResponse = httpResponse.pipe(retry(options.retry));\r\n        }\r\n        httpResponse\r\n            .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n    }        \r\n\r\n    return httpResponse;                   \r\n  }  \r\n\r\n  private processSuccessResponse<TResponse>(responseType?: ResponseType, response?: HttpResponse<TResponse>, success?: IObservableBase) : void {\r\n\r\n    if (responseType != null && success != null) {\r\n      if (response.ok) {\r\n        switch(responseType) {        \r\n          case ResponseType.IObservable:\r\n            let iObservable = <IObservable<TResponse>>success;\r\n            iObservable(response!.body);\r\n            break;\r\n          case ResponseType.IObservableHttpResponse:\r\n            let iObservableHttpResponse = <IObservableHttpResponse>success;\r\n            let subscribe1: ISubscribeBase = new SubscribeBase();\r\n            subscribe1.ok = response.ok;\r\n            subscribe1.status = response.status;\r\n            subscribe1.statusText = response.statusText;\r\n            subscribe1.headers = response.headers;\r\n                    \r\n            iObservableHttpResponse(subscribe1);                            \r\n            break;\r\n          case ResponseType.IObservableHttpCustomResponse:\r\n            let iObservableHttpCustomResponse = <IObservableHttpCustomResponse<TResponse>>success;\r\n            let subscribe2: ISubscribe<TResponse> = new Subscribe<TResponse>();\r\n            subscribe2.ok = response.ok;\r\n            subscribe2.status = response.status;\r\n            subscribe2.statusText = response.statusText;\r\n            subscribe2.body = response.body;                        \r\n            subscribe2.headers = response.headers;\r\n                    \r\n            iObservableHttpCustomResponse(subscribe2);                            \r\n            break;\r\n        }\r\n      }\r\n    }    \r\n  }\r\n\r\n  private processErrorResponse<TError>(error: any, failure?: IObservableErrorBase, errorType?: ErrorType) : void {\r\n\r\n    if (failure != null && errorType != null) {\r\n      switch(errorType)\r\n      {\r\n        case ErrorType.IObservableError:\r\n          let observableError = <IObservableError<TError>> failure;\r\n          observableError(error!.error);        \r\n          break;\r\n        case ErrorType.IObservableHttpError:\r\n          let observableHttpError = <IObservableHttpError> failure;\r\n          let subscribe1: SubscribeError = new SubscribeError();\r\n          subscribe1.ok = false;\r\n          subscribe1.headers = error.headers;\r\n          subscribe1.message = error.message;\r\n          subscribe1.status = error.status;\r\n          subscribe1.statusText = error.statusText;\r\n  \r\n          observableHttpError(subscribe1);\r\n          break;\r\n        case ErrorType.IObservableHttpCustomError:\r\n          let observableHttpCustomError = <IObservableHttpCustomError<TError>> failure;\r\n          let subscribe: SubscribeCustomError<TError> = new SubscribeCustomError();\r\n          subscribe.ok = false;\r\n          if (error.error) {\r\n            subscribe.error = error.error;\r\n          }        \r\n          subscribe.headers = error.headers;\r\n          subscribe.message = error.message;\r\n          subscribe.status = error.status;\r\n          subscribe.statusText = error.statusText;\r\n  \r\n          observableHttpCustomError(subscribe);\r\n          break;\r\n        default:        \r\n          break;\r\n      }\r\n    }    \r\n  }  \r\n}","import { NgModule } from '@angular/core';\n//import { AngularExtendedHttpClientComponent } from './angular-extended-http-client.component';\n\nimport { HttpClientExt } from '../lib/angular-extended-http-client.service';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  imports: [ HttpClientModule ],\n  providers: [ HttpClientExt ]  \n})\nexport class HttpClientExtModule { }\n"]}