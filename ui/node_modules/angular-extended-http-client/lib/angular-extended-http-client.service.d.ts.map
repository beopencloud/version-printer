{"version":3,"file":"angular-extended-http-client.service.d.ts","sources":["angular-extended-http-client.service.d.ts"],"names":[],"mappingssourcesContent":["import { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nexport interface IObservableBase {\r\n}\r\nexport interface IObservableErrorBase {\r\n}\r\nexport interface IObservable<T> extends IObservableBase {\r\n    (subscribe: T): void;\r\n}\r\nexport interface IObservableHttpResponse extends IObservableBase {\r\n    (subscribe: ISubscribeBase): void;\r\n}\r\nexport interface IObservableHttpCustomResponse<T> extends IObservableBase {\r\n    (subscribe: ISubscribe<T>): void;\r\n}\r\nexport interface IObservableError<TError> extends IObservableErrorBase {\r\n    (error: TError): void;\r\n}\r\nexport interface IObservableHttpError extends IObservableErrorBase {\r\n    (error: ISubscribeError): void;\r\n}\r\nexport interface IObservableHttpCustomError<TError> extends IObservableErrorBase {\r\n    (error: ISubscribeCustomError<TError>): void;\r\n}\r\nexport interface ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\nexport interface ISubscribe<T> extends ISubscribeBase {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n}\r\nexport declare class SubscribeBase implements ISubscribeBase {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\nexport declare class Subscribe<T> implements ISubscribe<T> {\r\n    ok: boolean;\r\n    body: T;\r\n    headers: HttpHeaders;\r\n    status: number;\r\n    statusText: string;\r\n}\r\nexport interface ISubscribeError extends ISubscribeBase {\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\nexport interface ISubscribeCustomError<TError> extends ISubscribeBase {\r\n    error: TError;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\nexport declare class SubscribeError implements ISubscribeError {\r\n    ok: boolean;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\nexport declare class SubscribeCustomError<TError> implements ISubscribeCustomError<TError> {\r\n    ok: boolean;\r\n    error: TError;\r\n    headers: HttpHeaders;\r\n    message: string;\r\n    status: number;\r\n    statusText: string;\r\n}\r\nexport declare enum ResponseType {\r\n    IObservable = 0,\r\n    IObservableHttpResponse = 1,\r\n    IObservableHttpCustomResponse = 2\r\n}\r\nexport declare enum ErrorType {\r\n    IObservableError = 0,\r\n    IObservableHttpError = 1,\r\n    IObservableHttpCustomError = 2\r\n}\r\nexport interface IHttpClientExtended {\r\n    get<TResponse>(url: string, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>): Observable<HttpResponse<TResponse>>;\r\n    post<TRequest, TResponse>(url: string, model: TRequest, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>): Observable<HttpResponse<TResponse>>;\r\n    put<T>(url: string, model: T, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>): Observable<HttpResponse<T>>;\r\n    patch<T>(url: string, model: T, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>): Observable<HttpResponse<T>>;\r\n    delete<TResponse>(url: string, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>): Observable<HttpResponse<TResponse>>;\r\n}\r\nexport declare class HttpClientExt implements IHttpClientExtended {\r\n    private client;\r\n    constructor(client: HttpClient);\r\n    get<TResponse>(url: string, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>): Observable<HttpResponse<TResponse>>;\r\n    post<TRequest, TResponse>(url: string, model: TRequest, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>): Observable<HttpResponse<TResponse>>;\r\n    put<T>(url: string, model: T, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>): Observable<HttpResponse<T>>;\r\n    patch<T>(url: string, model: T, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<T>, HttpResponse<T>>): Observable<HttpResponse<T>>;\r\n    delete<TResponse>(url: string, responseType?: ResponseType, success?: IObservableBase, failureType?: ErrorType, failure?: IObservableErrorBase, options?: any, pipe?: OperatorFunction<HttpResponse<TResponse>, HttpResponse<TResponse>>): Observable<HttpResponse<TResponse>>;\r\n    private processSuccessResponse;\r\n    private processErrorResponse;\r\n}\r\n"]}