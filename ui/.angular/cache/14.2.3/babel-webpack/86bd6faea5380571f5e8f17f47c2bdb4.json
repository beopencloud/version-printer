{"ast":null,"code":"import { retry } from 'rxjs/operators';\nimport { Injectable, NgModule, defineInjectable, inject } from '@angular/core';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\n\nclass SubscribeBase {}\n/**\r\n * @template T\r\n */\n\n\nclass Subscribe {}\n\nclass SubscribeError {}\n/**\r\n * @template TError\r\n */\n\n\nclass SubscribeCustomError {}\n/** @enum {number} */\n\n\nconst ResponseType = {\n  IObservable: 0,\n  IObservableHttpResponse: 1,\n  IObservableHttpCustomResponse: 2\n};\nResponseType[ResponseType.IObservable] = 'IObservable';\nResponseType[ResponseType.IObservableHttpResponse] = 'IObservableHttpResponse';\nResponseType[ResponseType.IObservableHttpCustomResponse] = 'IObservableHttpCustomResponse';\n/** @enum {number} */\n\nconst ErrorType = {\n  IObservableError: 0,\n  IObservableHttpError: 1,\n  IObservableHttpCustomError: 2\n};\nErrorType[ErrorType.IObservableError] = 'IObservableError';\nErrorType[ErrorType.IObservableHttpError] = 'IObservableHttpError';\nErrorType[ErrorType.IObservableHttpCustomError] = 'IObservableHttpCustomError';\n\nclass HttpClientExt {\n  /**\r\n   * @param {?} client\r\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\r\n   * @template TResponse\r\n   * @param {?} url\r\n   * @param {?=} responseType\r\n   * @param {?=} success\r\n   * @param {?=} failureType\r\n   * @param {?=} failure\r\n   * @param {?=} options\r\n   * @param {?=} pipe\r\n   * @return {?}\r\n   */\n\n\n  get(url, responseType, success, failureType, failure, options, pipe) {\n    /** @type {?} */\n    let httpResponse = this.client.get(url, options != null ? {\n      headers: options.headers,\n      observe: 'response'\n    } : {\n      observe: 'response'\n    });\n\n    if (responseType != null && success != null) {\n      if (pipe != null) {\n        httpResponse = httpResponse.pipe(pipe);\n      }\n\n      if (options != null && options.retry != null && options.retry > 0) {\n        httpResponse = httpResponse.pipe(retry(options.retry));\n      }\n\n      httpResponse.subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\n    }\n\n    return httpResponse;\n  }\n  /**\r\n   * @template TRequest, TResponse\r\n   * @param {?} url\r\n   * @param {?} model\r\n   * @param {?=} responseType\r\n   * @param {?=} success\r\n   * @param {?=} failureType\r\n   * @param {?=} failure\r\n   * @param {?=} options\r\n   * @param {?=} pipe\r\n   * @return {?}\r\n   */\n\n\n  post(url, model, responseType, success, failureType, failure, options, pipe) {\n    /** @type {?} */\n    let httpResponse = this.client.post(url, model, options != null ? {\n      headers: options.headers,\n      observe: 'response'\n    } : {\n      observe: 'response'\n    });\n\n    if (responseType != null && success != null) {\n      if (pipe != null) {\n        httpResponse = httpResponse.pipe(pipe);\n      }\n\n      if (options != null && options.retry != null && options.retry > 0) {\n        httpResponse = httpResponse.pipe(retry(options.retry));\n      }\n\n      httpResponse.subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\n    }\n\n    return httpResponse;\n  }\n  /**\r\n   * @template T\r\n   * @param {?} url\r\n   * @param {?} model\r\n   * @param {?=} responseType\r\n   * @param {?=} success\r\n   * @param {?=} failureType\r\n   * @param {?=} failure\r\n   * @param {?=} options\r\n   * @param {?=} pipe\r\n   * @return {?}\r\n   */\n\n\n  put(url, model, responseType, success, failureType, failure, options, pipe) {\n    /** @type {?} */\n    let httpResponse = this.client.put(url, model, options != null ? {\n      headers: options.headers,\n      observe: 'response'\n    } : {\n      observe: 'response'\n    });\n\n    if (responseType != null && success != null) {\n      if (pipe != null) {\n        httpResponse = httpResponse.pipe(pipe);\n      }\n\n      if (options != null && options.retry != null && options.retry > 0) {\n        httpResponse = httpResponse.pipe(retry(options.retry));\n      }\n\n      httpResponse.subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\n    }\n\n    return httpResponse;\n  }\n  /**\r\n   * @template T\r\n   * @param {?} url\r\n   * @param {?} model\r\n   * @param {?=} responseType\r\n   * @param {?=} success\r\n   * @param {?=} failureType\r\n   * @param {?=} failure\r\n   * @param {?=} options\r\n   * @param {?=} pipe\r\n   * @return {?}\r\n   */\n\n\n  patch(url, model, responseType, success, failureType, failure, options, pipe) {\n    /** @type {?} */\n    let httpResponse = this.client.patch(url, model, options != null ? {\n      headers: options.headers,\n      observe: 'response'\n    } : {\n      observe: 'response'\n    });\n\n    if (responseType != null && success != null) {\n      if (pipe != null) {\n        httpResponse = httpResponse.pipe(pipe);\n      }\n\n      if (options != null && options.retry != null && options.retry > 0) {\n        httpResponse = httpResponse.pipe(retry(options.retry));\n      }\n\n      httpResponse.subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\n    }\n\n    return httpResponse;\n  }\n  /**\r\n   * @template TResponse\r\n   * @param {?} url\r\n   * @param {?=} responseType\r\n   * @param {?=} success\r\n   * @param {?=} failureType\r\n   * @param {?=} failure\r\n   * @param {?=} options\r\n   * @param {?=} pipe\r\n   * @return {?}\r\n   */\n\n\n  delete(url, responseType, success, failureType, failure, options, pipe) {\n    /** @type {?} */\n    let httpResponse = this.client.delete(url, options != null ? {\n      headers: options.headers,\n      observe: 'response'\n    } : {\n      observe: 'response'\n    });\n\n    if (responseType != null && success != null) {\n      if (pipe != null) {\n        httpResponse = httpResponse.pipe(pipe);\n      }\n\n      if (options != null && options.retry != null && options.retry > 0) {\n        httpResponse = httpResponse.pipe(retry(options.retry));\n      }\n\n      httpResponse.subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\n    }\n\n    return httpResponse;\n  }\n  /**\r\n   * @private\r\n   * @template TResponse\r\n   * @param {?=} responseType\r\n   * @param {?=} response\r\n   * @param {?=} success\r\n   * @return {?}\r\n   */\n\n\n  processSuccessResponse(responseType, response, success) {\n    if (responseType != null && success != null) {\n      if (response.ok) {\n        switch (responseType) {\n          case ResponseType.IObservable:\n            /** @type {?} */\n            let iObservable =\n            /** @type {?} */\n            success;\n            iObservable(\n            /** @type {?} */\n            response.body);\n            break;\n\n          case ResponseType.IObservableHttpResponse:\n            /** @type {?} */\n            let iObservableHttpResponse =\n            /** @type {?} */\n            success;\n            /** @type {?} */\n\n            let subscribe1 = new SubscribeBase();\n            subscribe1.ok = response.ok;\n            subscribe1.status = response.status;\n            subscribe1.statusText = response.statusText;\n            subscribe1.headers = response.headers;\n            iObservableHttpResponse(subscribe1);\n            break;\n\n          case ResponseType.IObservableHttpCustomResponse:\n            /** @type {?} */\n            let iObservableHttpCustomResponse =\n            /** @type {?} */\n            success;\n            /** @type {?} */\n\n            let subscribe2 = new Subscribe();\n            subscribe2.ok = response.ok;\n            subscribe2.status = response.status;\n            subscribe2.statusText = response.statusText;\n            subscribe2.body = response.body;\n            subscribe2.headers = response.headers;\n            iObservableHttpCustomResponse(subscribe2);\n            break;\n        }\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   * @template TError\r\n   * @param {?} error\r\n   * @param {?=} failure\r\n   * @param {?=} errorType\r\n   * @return {?}\r\n   */\n\n\n  processErrorResponse(error, failure, errorType) {\n    if (failure != null && errorType != null) {\n      switch (errorType) {\n        case ErrorType.IObservableError:\n          /** @type {?} */\n          let observableError =\n          /** @type {?} */\n          failure;\n          observableError(\n          /** @type {?} */\n          error.error);\n          break;\n\n        case ErrorType.IObservableHttpError:\n          /** @type {?} */\n          let observableHttpError =\n          /** @type {?} */\n          failure;\n          /** @type {?} */\n\n          let subscribe1 = new SubscribeError();\n          subscribe1.ok = false;\n          subscribe1.headers = error.headers;\n          subscribe1.message = error.message;\n          subscribe1.status = error.status;\n          subscribe1.statusText = error.statusText;\n          observableHttpError(subscribe1);\n          break;\n\n        case ErrorType.IObservableHttpCustomError:\n          /** @type {?} */\n          let observableHttpCustomError =\n          /** @type {?} */\n          failure;\n          /** @type {?} */\n\n          let subscribe = new SubscribeCustomError();\n          subscribe.ok = false;\n\n          if (error.error) {\n            subscribe.error = error.error;\n          }\n\n          subscribe.headers = error.headers;\n          subscribe.message = error.message;\n          subscribe.status = error.status;\n          subscribe.statusText = error.statusText;\n          observableHttpCustomError(subscribe);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }\n\n}\n\nHttpClientExt.ɵfac = function HttpClientExt_Factory(t) {\n  return new (t || HttpClientExt)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient));\n};\n\nHttpClientExt.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: HttpClientExt,\n  factory: HttpClientExt.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nHttpClientExt.ctorParameters = () => [{\n  type: HttpClient\n}];\n/** @nocollapse */\n\n\nHttpClientExt.ngInjectableDef = defineInjectable({\n  factory: function HttpClientExt_Factory() {\n    return new HttpClientExt(inject(HttpClient));\n  },\n  token: HttpClientExt,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientExt, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nclass HttpClientExtModule {}\n\nHttpClientExtModule.ɵfac = function HttpClientExtModule_Factory(t) {\n  return new (t || HttpClientExtModule)();\n};\n\nHttpClientExtModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientExtModule\n});\nHttpClientExtModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [HttpClientExt],\n  imports: [HttpClientModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientExtModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule],\n      providers: [HttpClientExt]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientExtModule, {\n    imports: function () {\n      return [HttpClientModule];\n    }\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { SubscribeBase, Subscribe, SubscribeError, SubscribeCustomError, ResponseType, ErrorType, HttpClientExt, HttpClientExtModule };","map":{"version":3,"names":["retry","Injectable","NgModule","defineInjectable","inject","HttpClient","HttpClientModule","ɵngcc0","ɵngcc1","SubscribeBase","Subscribe","SubscribeError","SubscribeCustomError","ResponseType","IObservable","IObservableHttpResponse","IObservableHttpCustomResponse","ErrorType","IObservableError","IObservableHttpError","IObservableHttpCustomError","HttpClientExt","constructor","client","get","url","responseType","success","failureType","failure","options","pipe","httpResponse","headers","observe","subscribe","x","processSuccessResponse","error","processErrorResponse","post","model","put","patch","delete","response","ok","iObservable","body","iObservableHttpResponse","subscribe1","status","statusText","iObservableHttpCustomResponse","subscribe2","errorType","observableError","observableHttpError","message","observableHttpCustomError","ɵfac","HttpClientExt_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","ngInjectableDef","ngDevMode","ɵsetClassMetadata","args","HttpClientExtModule","HttpClientExtModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/home/labitty189/Documents/version-printer/node_modules/angular-extended-http-client/__ivy_ngcc__/fesm2015/angular-extended-http-client.js"],"sourcesContent":["import { retry } from 'rxjs/operators';\nimport { Injectable, NgModule, defineInjectable, inject } from '@angular/core';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nclass SubscribeBase {\r\n}\r\n/**\r\n * @template T\r\n */\r\nclass Subscribe {\r\n}\r\nclass SubscribeError {\r\n}\r\n/**\r\n * @template TError\r\n */\r\nclass SubscribeCustomError {\r\n}\r\n/** @enum {number} */\r\nconst ResponseType = {\r\n    IObservable: 0,\r\n    IObservableHttpResponse: 1,\r\n    IObservableHttpCustomResponse: 2,\r\n};\r\nResponseType[ResponseType.IObservable] = 'IObservable';\r\nResponseType[ResponseType.IObservableHttpResponse] = 'IObservableHttpResponse';\r\nResponseType[ResponseType.IObservableHttpCustomResponse] = 'IObservableHttpCustomResponse';\r\n/** @enum {number} */\r\nconst ErrorType = {\r\n    IObservableError: 0,\r\n    IObservableHttpError: 1,\r\n    IObservableHttpCustomError: 2,\r\n};\r\nErrorType[ErrorType.IObservableError] = 'IObservableError';\r\nErrorType[ErrorType.IObservableHttpError] = 'IObservableHttpError';\r\nErrorType[ErrorType.IObservableHttpCustomError] = 'IObservableHttpCustomError';\r\nclass HttpClientExt {\r\n    /**\r\n     * @param {?} client\r\n     */\r\n    constructor(client) {\r\n        this.client = client;\r\n    }\r\n    /**\r\n     * @template TResponse\r\n     * @param {?} url\r\n     * @param {?=} responseType\r\n     * @param {?=} success\r\n     * @param {?=} failureType\r\n     * @param {?=} failure\r\n     * @param {?=} options\r\n     * @param {?=} pipe\r\n     * @return {?}\r\n     */\r\n    get(url, responseType, success, failureType, failure, options, pipe) {\r\n        /** @type {?} */\r\n        let httpResponse = this.client.get(url, options != null ? { headers: options.headers, observe: 'response' } : { observe: 'response' });\r\n        if (responseType != null && success != null) {\r\n            if (pipe != null) {\r\n                httpResponse = httpResponse.pipe(pipe);\r\n            }\r\n            if (options != null && options.retry != null && options.retry > 0) {\r\n                httpResponse = httpResponse.pipe(retry(options.retry));\r\n            }\r\n            httpResponse\r\n                .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n        }\r\n        return httpResponse;\r\n    }\r\n    /**\r\n     * @template TRequest, TResponse\r\n     * @param {?} url\r\n     * @param {?} model\r\n     * @param {?=} responseType\r\n     * @param {?=} success\r\n     * @param {?=} failureType\r\n     * @param {?=} failure\r\n     * @param {?=} options\r\n     * @param {?=} pipe\r\n     * @return {?}\r\n     */\r\n    post(url, model, responseType, success, failureType, failure, options, pipe) {\r\n        /** @type {?} */\r\n        let httpResponse = this.client.post(url, model, options != null ?\r\n            { headers: options.headers, observe: 'response' }\r\n            : { observe: 'response' });\r\n        if (responseType != null && success != null) {\r\n            if (pipe != null) {\r\n                httpResponse = httpResponse.pipe(pipe);\r\n            }\r\n            if (options != null && options.retry != null && options.retry > 0) {\r\n                httpResponse = httpResponse.pipe(retry(options.retry));\r\n            }\r\n            httpResponse\r\n                .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n        }\r\n        return httpResponse;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} url\r\n     * @param {?} model\r\n     * @param {?=} responseType\r\n     * @param {?=} success\r\n     * @param {?=} failureType\r\n     * @param {?=} failure\r\n     * @param {?=} options\r\n     * @param {?=} pipe\r\n     * @return {?}\r\n     */\r\n    put(url, model, responseType, success, failureType, failure, options, pipe) {\r\n        /** @type {?} */\r\n        let httpResponse = this.client.put(url, model, options != null ?\r\n            { headers: options.headers, observe: 'response' }\r\n            : { observe: 'response' });\r\n        if (responseType != null && success != null) {\r\n            if (pipe != null) {\r\n                httpResponse = httpResponse.pipe(pipe);\r\n            }\r\n            if (options != null && options.retry != null && options.retry > 0) {\r\n                httpResponse = httpResponse.pipe(retry(options.retry));\r\n            }\r\n            httpResponse\r\n                .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n        }\r\n        return httpResponse;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} url\r\n     * @param {?} model\r\n     * @param {?=} responseType\r\n     * @param {?=} success\r\n     * @param {?=} failureType\r\n     * @param {?=} failure\r\n     * @param {?=} options\r\n     * @param {?=} pipe\r\n     * @return {?}\r\n     */\r\n    patch(url, model, responseType, success, failureType, failure, options, pipe) {\r\n        /** @type {?} */\r\n        let httpResponse = this.client.patch(url, model, options != null ?\r\n            { headers: options.headers, observe: 'response' }\r\n            : { observe: 'response' });\r\n        if (responseType != null && success != null) {\r\n            if (pipe != null) {\r\n                httpResponse = httpResponse.pipe(pipe);\r\n            }\r\n            if (options != null && options.retry != null && options.retry > 0) {\r\n                httpResponse = httpResponse.pipe(retry(options.retry));\r\n            }\r\n            httpResponse\r\n                .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n        }\r\n        return httpResponse;\r\n    }\r\n    /**\r\n     * @template TResponse\r\n     * @param {?} url\r\n     * @param {?=} responseType\r\n     * @param {?=} success\r\n     * @param {?=} failureType\r\n     * @param {?=} failure\r\n     * @param {?=} options\r\n     * @param {?=} pipe\r\n     * @return {?}\r\n     */\r\n    delete(url, responseType, success, failureType, failure, options, pipe) {\r\n        /** @type {?} */\r\n        let httpResponse = this.client.delete(url, options != null ?\r\n            { headers: options.headers, observe: 'response' }\r\n            : { observe: 'response' });\r\n        if (responseType != null && success != null) {\r\n            if (pipe != null) {\r\n                httpResponse = httpResponse.pipe(pipe);\r\n            }\r\n            if (options != null && options.retry != null && options.retry > 0) {\r\n                httpResponse = httpResponse.pipe(retry(options.retry));\r\n            }\r\n            httpResponse\r\n                .subscribe(x => this.processSuccessResponse(responseType, x, success), error => this.processErrorResponse(error, failure, failureType));\r\n        }\r\n        return httpResponse;\r\n    }\r\n    /**\r\n     * @private\r\n     * @template TResponse\r\n     * @param {?=} responseType\r\n     * @param {?=} response\r\n     * @param {?=} success\r\n     * @return {?}\r\n     */\r\n    processSuccessResponse(responseType, response, success) {\r\n        if (responseType != null && success != null) {\r\n            if (response.ok) {\r\n                switch (responseType) {\r\n                    case ResponseType.IObservable:\r\n                        /** @type {?} */\r\n                        let iObservable = (/** @type {?} */ (success));\r\n                        iObservable((/** @type {?} */ (response)).body);\r\n                        break;\r\n                    case ResponseType.IObservableHttpResponse:\r\n                        /** @type {?} */\r\n                        let iObservableHttpResponse = (/** @type {?} */ (success));\r\n                        /** @type {?} */\r\n                        let subscribe1 = new SubscribeBase();\r\n                        subscribe1.ok = response.ok;\r\n                        subscribe1.status = response.status;\r\n                        subscribe1.statusText = response.statusText;\r\n                        subscribe1.headers = response.headers;\r\n                        iObservableHttpResponse(subscribe1);\r\n                        break;\r\n                    case ResponseType.IObservableHttpCustomResponse:\r\n                        /** @type {?} */\r\n                        let iObservableHttpCustomResponse = (/** @type {?} */ (success));\r\n                        /** @type {?} */\r\n                        let subscribe2 = new Subscribe();\r\n                        subscribe2.ok = response.ok;\r\n                        subscribe2.status = response.status;\r\n                        subscribe2.statusText = response.statusText;\r\n                        subscribe2.body = response.body;\r\n                        subscribe2.headers = response.headers;\r\n                        iObservableHttpCustomResponse(subscribe2);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @template TError\r\n     * @param {?} error\r\n     * @param {?=} failure\r\n     * @param {?=} errorType\r\n     * @return {?}\r\n     */\r\n    processErrorResponse(error, failure, errorType) {\r\n        if (failure != null && errorType != null) {\r\n            switch (errorType) {\r\n                case ErrorType.IObservableError:\r\n                    /** @type {?} */\r\n                    let observableError = (/** @type {?} */ (failure));\r\n                    observableError((/** @type {?} */ (error)).error);\r\n                    break;\r\n                case ErrorType.IObservableHttpError:\r\n                    /** @type {?} */\r\n                    let observableHttpError = (/** @type {?} */ (failure));\r\n                    /** @type {?} */\r\n                    let subscribe1 = new SubscribeError();\r\n                    subscribe1.ok = false;\r\n                    subscribe1.headers = error.headers;\r\n                    subscribe1.message = error.message;\r\n                    subscribe1.status = error.status;\r\n                    subscribe1.statusText = error.statusText;\r\n                    observableHttpError(subscribe1);\r\n                    break;\r\n                case ErrorType.IObservableHttpCustomError:\r\n                    /** @type {?} */\r\n                    let observableHttpCustomError = (/** @type {?} */ (failure));\r\n                    /** @type {?} */\r\n                    let subscribe = new SubscribeCustomError();\r\n                    subscribe.ok = false;\r\n                    if (error.error) {\r\n                        subscribe.error = error.error;\r\n                    }\r\n                    subscribe.headers = error.headers;\r\n                    subscribe.message = error.message;\r\n                    subscribe.status = error.status;\r\n                    subscribe.statusText = error.statusText;\r\n                    observableHttpCustomError(subscribe);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\nHttpClientExt.ɵfac = function HttpClientExt_Factory(t) { return new (t || HttpClientExt)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient)); };\nHttpClientExt.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: HttpClientExt, factory: HttpClientExt.ɵfac, providedIn: 'root' });\r\n/** @nocollapse */\r\nHttpClientExt.ctorParameters = () => [\r\n    { type: HttpClient }\r\n];\r\n/** @nocollapse */ HttpClientExt.ngInjectableDef = defineInjectable({ factory: function HttpClientExt_Factory() { return new HttpClientExt(inject(HttpClient)); }, token: HttpClientExt, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientExt, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc1.HttpClient }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass HttpClientExtModule {\r\n}\nHttpClientExtModule.ɵfac = function HttpClientExtModule_Factory(t) { return new (t || HttpClientExtModule)(); };\nHttpClientExtModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpClientExtModule });\nHttpClientExtModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [HttpClientExt], imports: [HttpClientModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientExtModule, [{\n        type: NgModule,\n        args: [{\n                imports: [HttpClientModule],\n                providers: [HttpClientExt]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientExtModule, { imports: function () { return [HttpClientModule]; } }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { SubscribeBase, Subscribe, SubscribeError, SubscribeCustomError, ResponseType, ErrorType, HttpClientExt, HttpClientExtModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}